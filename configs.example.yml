##
## Self-describing configuration for this IRC bot.
## To set up your own configuration, simply copy-paste this as
## 'configs.yml' and start tweaking the values :D
##

# IRC server name
server: irc.freenode.net

# IRC server port
port: 6667

# IRC server password, leave empty if none
server_password:

# Are we debugging?
debug: true

# Logging level.
# Log level >2 will enable event stream logging (from module-logging.js).
# Log level >3 will also enable dumping the event stream's attachments (say
# the event for module.new attaches the module itself to the event)
loglevel: 4

# MOTD. gets displayed into the console on startup if not empty
motd:

# <nick>!<username>@(host) :<realname>
nick: IRCBot
username: IRCBot
realname: IRCBot

# this basically always gets authorization in `system` module commands
owner: "*!*@unaffiliated/boxmein"

# Authentication - leave everything empty if you don't need it.
auth:
  type: NickServ
  name: username
  password: password

# Command character to respond to
command_character: "\\"

# tell people your command character
# if the nickname and one of the following words is in a single line:
# 'character', 'command', 'control'
announce_character: true
announce_message: "i can be controlled with the following prefix: %char"

# Modules to load on startup.
modules_enabled:
  - test
  - hello
  - nickometer
  - logging

# Channels to join: a list of objects with name being the channel name.
# Future feature is that you could configure global properties specific
# to different channels, eg the command character.
channels:
  - name: "##boxmein"

# Module-specific configuration.
# Every module gets their own object here - omit if you don't want to
# configure a module. Modules should define reasonable defaults.
modules:

  # Test module: outputs this string with %cmd replaced by the exact command
  # eg if \test.asdf is called, %cmd is replaced by "test.asdf"
  test:
    message: "hello! the command you entered is %cmd"

  # System module: stuff like quit / eval / join / nick / mode
  system:
    # Authorized to use the system module.
    authorized:
      - "*!*@unaffiliated/boxmein"
      - "*!*@unaffiliated/ristovski"

  # Roulette module: a game of russian roulette (and other deadlies)
  roulette:
    # Punishment types
    punishment:
      # kick / kickban / ban
      type: kickban
      # seconds
      ban_duration: 30

    # Chances that something happens
    chances:
      # 1/6 chance of backfiring
      russian: 0.166666
      # 1/20 chance of kicking someone
      chancekick: 0.05
      # 1/4 chance of backfire
      chancekick_backfire: 0.25

  # Operator module: who are allowed to use op commands
  operator:
    # Always respond even to invalid calls
    loud: true
    # Chanops can use operator commands
    ops_allowed: true
    # Channel voices can use operator commands
    voices_allowed: true
    # The bot is not an operator
    not_an_op: "I'm not an operator!"
    # Someone is not allowed to perform this
    not_allowed: "Not allowed :D"
    # Always authorized to perform op commands
    authorized:
      - "*!*@unaffiliated/boxmein"

  # RPN calculator module
  rpn:
    # Nesting limit for user-defined commands
    stack_max: 100
    authorized:
      # Authorized to create user-defined commands
      - "*!*@unaffiliated/boxmein"

  # Bug logger
  bug:
    # People who don't get to use bug logger commands
    ignored:
      - "secondbox!*@*"

  # YouTube title outputter
  yt:
    # YouTube Data API v3 key
    api_key: ""

  # Outputs the version
  version:
    str: "boxnode v3 <todo edit version string>"
