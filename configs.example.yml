##
## Self-describing configuration for this IRC bot.
## To set up your own configuration, simply copy-paste this as
## 'configs.yml' and start tweaking the values :D
##

# IRC server name
server: irc.freenode.net

# IRC server port
port: 6667

# IRC server password, leave empty if none
server_password:

# Are we debugging?
debug: true

# Global log level, used when not overridden by module specific configuration
loglevel: INFO

# MOTD. gets displayed into the console on startup if not empty
motd:

# <nick>!<username>@(host) :<realname>
nick: IRCBot
username: IRCBot
realname: IRCBot

# this basically always gets authorization in `system` module commands
owner: "*!*@unaffiliated/boxmein"

# Authentication - leave everything empty if you don't need it.
auth:
  type: NickServ
  name: username
  password: password

# Command character to respond to
command_character: "\\"

# announce when a module throws an uncaught exception
# this disables the module.
announce_module_crash: true
announce_module_message: "your command crashed '%module' - it was disabled!"

# Modules to load on startup.
modules_enabled:
  - autorejoin
  - invitefollow
  - test
  - hello
  - nickometer
  - logging

# Channels to join: if this list were a JSON list it would look like this:
# "channels": [ { "name": "##boxmein" } ], so use the equivalent YAML!
channels:
  - name: "##boxmein"

# Module-specific configuration.
# Every module gets their own object here - omit if you don't want to
# configure a module. Modules should define reasonable defaults.
modules:

  # 
  # Test module: outputs this string with %cmd replaced by the exact command
  # eg if \test.asdf is called, %cmd is replaced by "test.asdf" and so the bot
  # replies "hello! the command you entered is test.asdf"
  test:
    message: "hello! the command you entered is %cmd"
    # messages to say when the user runs `test.potato`.
    potatoes:
      - "Oh hi! How are you holding up? Because I'M A POTATO."

  # 
  # System module: stuff like quit / eval / join / nick / mode are in this. only
  # authorize very very trusted users (full code access to the system!!)
  system:
    # Authorized to use the system module.
    authorized:
      - "*!*@unaffiliated/boxmein"
      - "*!*@unaffiliated/ristovski"

  # 
  # Roulette module: a game of russian roulette (and other deadlies). 
  roulette:
    # This is how the user is punished for failing a roulette shot.
    punishment:
      # kick / kickban / ban
      type: kickban
      # in seconds
      ban_duration: 30

    # How likely is it that each of the following chances happens:
    chances:
      # 1/6 chance of shooting yourself in the face.
      russian: 0.166666
      # 1/20 chance of kicking your desired target
      chancekick: 0.05
      # 1/4 chance of backfire
      chancekick_backfire: 0.25

  # 
  # Operator module: who are allowed to use op commands (voice/op/kick/ban)
  operator:
    # Always respond with a message, even to invalid calls
    loud: true
    # Channel operators can use operator commands
    ops_allowed: true
    # Channel voices can use operator commands
    voices_allowed: true
    # Message to display when this bot tries to do stuff but isn't opped
    not_an_op: "I'm not an operator!"
    # Message to display when someone tries something
    not_allowed: "Not allowed :D"
    # List of hostmask patterns for people who are always authorized to do stuff
    authorized:
      - "*!*@unaffiliated/boxmein"

  # 
  # A reverse-polish-notation calculator
  rpn:
    # Nesting limit for user-defined commands
    stack_max: 100
    authorized:
      # Authorized to create user-defined commands
      - "*!*@unaffiliated/boxmein"

  # 
  # Bug reporting tool
  bug:
    # People who don't get to use bug reporting commands
    ignored:
      - "secondbox!*@*"

  # 
  # Module that outputs titles and general info for youtube videos.
  yt:
    # YouTube Data API v3 key
    api_key: ""
    # HTTP headers to add to the request
    headers:
    
    # Which channels is this thing enabled in, or do we filter at all?
    whitelist: true
    channel_whitelist:
      - "##boxmein"

  # Outputs the version string of this bot 
  version:
    str: "boxnode v3 <todo edit version string>"

  # TPT module - interop with powder toy forums
  tpt:
    # a key to encrypt the session storage 
    sessionstore_key:

    # an endpoint for API calls, prefixed to other URLs
    endpoint:
      official: "http://powdertoy.co.uk"
      tptnet: "http://thepowdertoy.net"

    # download links to various Powder Toy versions
    downloads:
      official:
        win32: "http://powdertoy.co.uk/Download/powder-win32.zip"
        lin32: "http://powdertoy.co.uk/Download/powder-lin32.zip"
        mac: "http://powdertoy.co.uk/Download/powder-mac32.dmg"
      jacob1:
        win32: "https://dl.dropboxusercontent.com/u/43784416/Jacob1%27s%20Mod/Jacob1s%20Mod%20ver%2031.1.zip"
        lin32: "https://dl.dropboxusercontent.com/u/43784416/Jacob1%27s%20Mod/mac/Jacob1s%20Mod%20ver%2031.1%20mac.zip"
        lin64: "https://dl.dropboxusercontent.com/u/43784416/Jacob1%27s%20Mod/linux/Jacob1s%20Mod%20ver%2031.1%20linux64.zip"
        mac: "https://dl.dropboxusercontent.com/u/43784416/Jacob1%27s%20Mod/mac/Jacob1s%20Mod%20ver%2031.1%20mac.zip"
      feynman:
        all: "http://files.brilliant-minds.tk/~feynman/mod/download.html"
      nucular:
        win32: "https://www.dropbox.com/s/3jk13ohbg7fhfhu/powder32-nuculars-mod.zip"
        lin32: "https://dl.dropboxusercontent.com/u/43784416/nucular%27s%20mod/nuculars%20mod-lin32.zip"
        lin64: "https://dl.dropboxusercontent.com/u/43784416/nucular%27s%20mod/nuculars%20mod-lin64.zip"
      boxmein:
        win32: "https://dl.dropbox.com/u/22100200/boxpowder/boxpowder.zip"
      tptnet:
        win32: "http://thepowdertoy.net/Downloads/powder.zip"
        lin32: "http://thepowdertoy.net/Downloads/powder-linux32.zip"
        lin64: "http://thepowdertoy.net/Downloads/powder-linux64.zip"
        mac: "http://thepowdertoy.net/Downloads/powder-mac.zip"

  # 
  # Sends a message saying boxnode's command character, when someone asks
  commandchar:
    # the message to send!
    message: "all commands for me start with the %char character. try out %charlist and %charhelp!"
    # "how do you control boxnode" matches because this word is in the list
    match_words:
      - control
      - character
      - prefix

  # 
  # a module that responds to "hi boxnode" with friendly greetings
  autohello:
    message: "%rand_hello %nick!"
    hellos:
      - hi
      - hello
      - sup
      - yo
      - what's up
      - how's it hanging
      - what's new
      - how you been
    match_words:
      - hello
      - hi
      - sup